package io.tezrok.liquibase

import io.tezrok.core.GeneratorContext
import io.tezrok.core.common.DirectoryNode
import io.tezrok.core.common.FileNode
import io.tezrok.core.output.ProjectNode
import io.tezrok.schema.SchemaLoader
import io.tezrok.sql.SqlGenerator
import io.tezrok.util.resourceAsPath
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test
import java.time.Clock
import java.time.Instant
import java.time.ZoneId


class LiquibaseGeneratorTest {
    private val fixedClock = Clock.fixed(Instant.parse("2023-03-19T14:32:54.00Z"), ZoneId.systemDefault())
    private val generatorContext = GeneratorContext()
    private val sqlGenerator = SqlGenerator()
    private val generator = LiquibaseGenerator(generatorContext, sqlGenerator, fixedClock)
    private val schemaLoader = SchemaLoader()

    @Test
    fun testGenerate() {
        val project = ProjectNode("TestProject")
        val module = project.addModule("core")
        val schema = schemaLoader.load("/schemas/AddressInfo.json".resourceAsPath())
        generator.generate(schema, module)

        val files = module.getResources().getFiles()
        assertEquals(1, files.size)
        val dbDir = files[0]
        assertDirectory(dbDir, "db", 2)
        val dbFiles = dbDir.getFiles()
        val updatesDir = assertDirectory(dbFiles[0], "updates", 1)
        val masterFile = assertFile(dbFiles[1], "master.xml")
        assertFile(updatesDir.getFiles()[0], "2023-03-19_153254-Initial.sql")

        assertEquals(MASTER_EXPECTED, masterFile.asText())
        assertEquals(INITIAL_SQL_EXPECTED, updatesDir.getFiles()[0].asText())
    }

    private fun assertFile(node: FileNode, name: String): FileNode {
        assertEquals(name, node.getName())
        assertTrue(node.isFile()) { "Node should be file: " + node.getName() }
        assertTrue(node.getFilesSize() == 0) { "Node should not have children: " + node.getName() }
        return node
    }

    private fun assertDirectory(node: FileNode, name: String, childrenSize: Int): DirectoryNode {
        assertEquals(name, node.getName())
        assertTrue(node.isDirectory()) { "Node should be directory: " + node.getName() }
        assertEquals(childrenSize, node.getFilesSize()) { "Node should have $childrenSize children: " + node.getName() }
        assertInstanceOf(
            DirectoryNode::class.java,
            node
        ) { "Node should be instance of DirectoryNode: " + node.getName() }

        return node as DirectoryNode
    }

    private companion object {
        const val MASTER_EXPECTED = """<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
        <!-- DON'T EDIT! THIS FILE GENERATED BY tezrok at 2023-03-19T15:32:54 -->

    <include file="/db/updates/2023-03-19_153254-Initial.sql" relativeToChangelogFile="false"/>
</databaseChangeLog>
"""

        const val INITIAL_SQL_EXPECTED = """--liquibase formatted sql
-- DON'T EDIT! THIS FILE GENERATED BY tezrok at 2023-03-19T15:32:54

--changeset TezrokUser:2023-03-19_153254-Initial
--comment Initial script for creating the structure

CREATE TABLE Address (
  id SERIAL PRIMARY KEY,
  street VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255) NOT NULL,
  zip VARCHAR(255),
  country VARCHAR(255) NOT NULL,
  stateId INT NOT NULL
);

"""
    }
}
