package ${package}.repository;

import ${package}.dto.WithId;
import org.jetbrains.annotations.NotNull;
import org.jooq.DSLContext;
import org.jooq.Field;
import org.jooq.Table;
import org.jooq.UpdatableRecord;

import java.util.Collection;
import java.util.List;
import java.util.Objects;

/**
 * Base class for all Jooq repositories with single primary key.
 *
 * @param <R>  Jooq record type
 * @param <ID> primary type
 * @param <P>  Pojo type
 */
abstract class JooqRepository<R extends UpdatableRecord<R>, ID, P extends WithId<ID>> extends JooqBaseRepository<R, P> {

    protected final Field<ID> idField;

    JooqRepository(DSLContext dsl, Table<R> table, Field<ID> idField, Class<P> pojoClass) {
        super(dsl, table, pojoClass);
        this.idField = idField;
    }

    public P getById(ID id) {
        return getRecordById(id).map(rec -> rec.into(pojoClass));
    }

    @NotNull
    public List<P> findAllById(Collection<ID> ids) {
        return dsl.selectFrom(table).where(idField.in(ids)).fetchInto(pojoClass);
    }

    @NotNull
    @Override
    public P update(@NotNull P pojo) {
        R rec = Objects.requireNonNull(getRecordById(pojo.getId()), () -> "Record not found by id: " + pojo.getId());
        rec.from(pojo);
        rec.store();
        return rec.into(pojoClass);
    }

    @NotNull
    @Override
    public P save(@NotNull P pojo) {
        return pojo.getId() == null ? create(pojo) : update(pojo);
    }

    public int deleteById(ID id) {
        return dsl.delete(table).where(idField.eq(id)).execute();
    }

    public int deleteAllById(Collection<ID> ids) {
        return dsl.delete(table).where(idField.in(ids)).execute();
    }

    public boolean existsById(ID id) {
        return dsl.fetchExists(table, idField.eq(id));
    }

    public R getRecordById(ID id) {
        return dsl.selectFrom(table).where(idField.eq(id)).fetchOne();
    }
}
