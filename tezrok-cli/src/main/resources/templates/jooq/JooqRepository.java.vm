package ${package}.repository;

import ${package}.dto.WithId;
import org.jooq.DSLContext;
import org.jooq.Field;
import org.jooq.Table;
import org.jooq.UpdatableRecord;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.StreamSupport;

/**
 * Base class for all Jooq repositories.
 *
 * @param <R>  Jooq record type
 * @param <ID> primary type
 * @param <P>  Pojo type
 */
abstract class JooqRepository<R extends UpdatableRecord<R>, ID, P extends WithId<ID>> {
    protected final DSLContext dsl;
    protected final Table<R> table;
    protected final Field<ID> idField;
    protected final Class<P> pojoClass;

    JooqRepository(DSLContext dsl, Table<R> table, Field<ID> idField, Class<P> pojoClass) {
        this.dsl = dsl;
        this.table = table;
        this.idField = idField;
        this.pojoClass = pojoClass;
    }

    public P getById(ID id) {
        return getRecordById(id).into(pojoClass);
    }

    public List<P> findAll() {
        return dsl.selectFrom(table).fetchInto(pojoClass);
    }

    public List<P> findAllById(Collection<ID> ids) {
        return dsl.selectFrom(table).where(idField.in(ids)).fetchInto(pojoClass);
    }

    public long count() {
        return dsl.fetchCount(table);
    }

    public P update(P pojo) {
        R rec = getRecordById(pojo.getId());
        rec.from(pojo);
        rec.store();
        return rec.into(pojoClass);
    }

    public P create(P pojo) {
        R rec = newRecord(pojo);
        rec.store();
        return rec.into(pojoClass);
    }

    public P save(P pojo) {
        return pojo.getId() == null ? create(pojo) : update(pojo);
    }

    public List<P> saveAll(Iterable<P> entities) {
        return StreamSupport.stream(entities.spliterator(), false).map(this::save).toList();
    }

    public int deleteById(ID id) {
        return dsl.delete(table).where(idField.eq(id)).execute();
    }

    public int deleteAllById(Collection<ID> ids) {
        return dsl.delete(table).where(idField.in(ids)).execute();
    }

    public int deleteAll() {
        return dsl.truncate(table).execute();
    }

    public boolean existsById(ID id) {
        return dsl.fetchExists(table, idField.eq(id));
    }

    public R getRecordById(ID id) {
        return Objects.requireNonNull(dsl.selectFrom(table).where(idField.eq(id)).fetchOne(), () -> table.getName()  + ": Record not found: " + id);
    }

    protected R newRecord(Object obj) {
        return dsl.newRecord(table, obj);
    }
}
