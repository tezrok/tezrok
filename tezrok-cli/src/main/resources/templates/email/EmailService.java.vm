package ${package}.service;

import ${package}.config.AppConfig;
#if($newEntityRecordsFeature)
import ${package}.dto.NewEntitiesInfo;
#end
import ${package}.dto.UserDto;
import ${package}.dto.UserProfileDto;
import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Service;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

/**
 * Service for sending emails.
 */
@Slf4j
@Service
public class EmailService {
    private static final String SSL_FACTORY = "javax.net.ssl.SSLSocketFactory";
    private final AppConfig appConfig;
    private final TemplateService templateService;

    public EmailService(final AppConfig appConfig,
                        final TemplateService templateService) {
        this.appConfig = appConfig;
        this.templateService = templateService;
    }

    public void sendActivationLink(final UserDto userDto, final UserProfileDto userProfile) throws MessagingException {
        final String activationCode = URLEncoder.encode(userProfile.getActivationCode(), StandardCharsets.UTF_8);
        final String activationLink = appConfig.getMainHost() + "/activate?code=" + activationCode;

        log.info("Sending activation link to user: {}, email: {}, link: {}", userDto.getName(), userDto.getEmail(), activationLink);

        final Map<String, Object> params = Map.of("username", userDto.getName(),
                "activationLink", activationLink, "siteUrl", appConfig.getMainHost());
        final String body = templateService.getTemplate("/templates/velocity/email-send-activation-link.html", params);

        send(appConfig.getEmailHost(),
                appConfig.getEmailFrom(),
                appConfig.getEmailPassword(),
                userDto.getEmail(),
                null,
                appConfig.getProductName() + " - Confirm your registration",
                body,
                true);
    }

    public void sendPasswordRecover(final UserDto userDto, final UserProfileDto userProfile) throws MessagingException {
        final String passwordResetCode = URLEncoder.encode(userProfile.getPasswordResetCode(), StandardCharsets.UTF_8);
        final String recoverLink = appConfig.getMainHost() + "/recover-finish?code=" + passwordResetCode;

        log.info("Sending password recover link to user: {}, email: {}, link: {}", userDto.getName(), userDto.getEmail(), recoverLink);

        final Map<String, Object> params = Map.of("username", userDto.getName(),
                "recoverLink", recoverLink, "siteUrl", appConfig.getMainHost());
        final String body = templateService.getTemplate("/templates/velocity/email-send-password-recovery-link.html", params);

        send(appConfig.getEmailHost(),
                appConfig.getEmailFrom(),
                appConfig.getEmailPassword(),
                userDto.getEmail(),
                null,
                appConfig.getProductName() + " - Recover your account",
                body,
                true);
    }
#if($newEntityRecordsFeature)

    public void sendNewUsersEmail(final NewEntitiesInfo<UserDto, Long> info, final UserDto adminUser) throws MessagingException {
        final Map<String, Object> params = Map.of("users", info.getLastItems(), "usersCount", info.getNewCount(),
                "siteUrl", appConfig.getMainHost());
        final String body = templateService.getTemplate("/templates/velocity/email-new-users.html", params);

        send(appConfig.getEmailHost(),
                appConfig.getEmailFrom(),
                appConfig.getEmailPassword(),
                adminUser.getEmail(),
                null,
                appConfig.getProductName() + " - New users",
                body,
                true);
    }
#end

    private void send(final String host,
                      final String emailFrom,
                      final String password,
                      final String emailTo,
                      final String copyTo,
                      final String subject,
                      final String message,
                      final boolean isHtml) throws MessagingException {
        Properties props = System.getProperties();
        props.setProperty("mail.smtp.host", host);
        props.setProperty("mail.smtp.socketFactory.class", SSL_FACTORY);
        props.setProperty("mail.smtp.socketFactory.fallback", "true");
        props.setProperty("mail.smtp.port", "465");
        props.setProperty("mail.smtp.socketFactory.port", "465");
        props.setProperty("mail.smtp.auth", "true");
        //props.setProperty("mail.debug", "true");

        log.debug("Sending email to: {}, copyTo: {}, html: {}\n subject: {},\n message: {}",
                emailTo, copyTo, isHtml, subject, message);

        var session = Session.getDefaultInstance(props, new EmailAuth(emailFrom, password));

        var msg = new MimeMessage(session);

        msg.setFrom(new InternetAddress(emailFrom));
        msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailTo, false));

        if (StringUtils.isNotBlank(copyTo)) {
            msg.setRecipients(Message.RecipientType.CC, InternetAddress.parse(copyTo, false));
        }

        msg.setSubject(subject);
        msg.setSentDate(new Date());
        if (isHtml) {
            msg.setText(message, "utf-8", "html");
        } else {
            msg.setText(message, "utf-8");
        }

        Transport.send(msg);
    }

    @Data
    @AllArgsConstructor
    @EqualsAndHashCode(callSuper = true)
    private static class EmailAuth extends Authenticator {
        private final String email;
        private final String password;

        @NotNull
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(email, password);
        }
    }
}
