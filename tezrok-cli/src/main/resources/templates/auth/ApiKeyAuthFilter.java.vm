package ${package}.config;

import ${package}.dto.full.UserProfileFullDto;
import ${package}.dto.security.ApiKeyAuthenticationToken;
import ${package}.service.CurrentAuthService;
import ${package}.service.UserProfileService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.CredentialsExpiredException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * Filter for API key authentication through "API-Key" header or parameter.
 * <p>
 * Used only for /api/** paths.
 *
 * @see ApiKeyAuthenticationToken
 */
@Slf4j
@Component
public class ApiKeyAuthFilter extends AbstractAuthenticationProcessingFilter {
    private static final String API_KEY_HEADER = "API-Key";
    private final CurrentAuthService currentAuthService;
    private final UserDetailsService userDetailsService;
    private final UserProfileService userProfileService;

    public ApiKeyAuthFilter(final CurrentAuthService currentAuthService,
                            final UserDetailsService userDetailsService,
                            final UserProfileService userProfileService) {
        super(new AntPathRequestMatcher("/api/**"), new NotUsedAuthManager());
        setAuthenticationSuccessHandler(new NopAuthenticationSuccessHandler());
        this.currentAuthService = currentAuthService;
        this.userDetailsService = userDetailsService;
        this.userProfileService = userProfileService;
    }

    @Override
    public Authentication attemptAuthentication(final HttpServletRequest request, final HttpServletResponse response)
            throws AuthenticationException {
        final String apiKey = getApiKey(request);
        if (StringUtils.isBlank(apiKey)) {
            log.warn("API Key is not provided");
            throw new BadCredentialsException("Invalid API Key");
        }
        // TODO: optimize - load username by api key directly
        final Long userProfileId = userProfileService.getIdByApiKey(apiKey);
        if (userProfileId == null) {
            log.warn("API Key is not found: {}", apiKey);
            throw new BadCredentialsException("Invalid API Key");
        }
        final UserProfileFullDto userProfile = userProfileService.getFullUserProfileById(userProfileId);
        if (userProfile == null) {
            log.warn("API Key is not found: {}, userProfileId: {}", apiKey, userProfileId);
            throw new BadCredentialsException("Invalid API Key");
        }
        if (userProfile.getApiKeyExpireAt() == null || OffsetDateTime.now().isAfter(userProfile.getApiKeyExpireAt())) {
            log.warn("API Key expired: {}, user: {}", apiKey, userProfile.getUser().getName());
            throw new CredentialsExpiredException("API Key expired");
        }
        final UserDetails userDetails = userDetailsService.loadUserByUsername(userProfile.getUser().getName());
        return new ApiKeyAuthenticationToken(apiKey, userDetails);
    }

    @Override
    protected void successfulAuthentication(final HttpServletRequest request,
                                            final HttpServletResponse response,
                                            final FilterChain chain,
                                            final Authentication authResult) throws IOException, ServletException {
        super.successfulAuthentication(request, response, chain, authResult);
        chain.doFilter(request, response);
    }

    protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) {
        if (getApiKey(request) == null
                || currentAuthService.isAuthenticated()
                || !super.requiresAuthentication(request, response)) {
            // Skip if API key is not provided or user is already authenticated
            // or request does not match the specified matcher, see RequestMatcher above
            return false;
        }

        return true;
    }

    private static String getApiKey(final HttpServletRequest request) {
        return Objects.toString(request.getHeader(API_KEY_HEADER), request.getParameter(API_KEY_HEADER));
    }

    private static class NotUsedAuthManager implements AuthenticationManager {
        @Override
        public Authentication authenticate(final Authentication authentication) throws AuthenticationException {
            throw new UnsupportedOperationException("AuthenticationManager is not expected to be used");
        }
    }

    private static class NopAuthenticationSuccessHandler implements AuthenticationSuccessHandler {
        @Override
        public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {
            // Do nothing
        }
    }
}
