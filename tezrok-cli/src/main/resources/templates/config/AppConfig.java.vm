package ${package}.config;

import ${package}.config.custom.AppCustomConfig;
import ${package}.util.GitProperties;
import jakarta.annotation.PostConstruct;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.lang.management.ManagementFactory;
import java.lang.management.RuntimeMXBean;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Data
@Component
@EqualsAndHashCode(callSuper = true)
@ConfigurationProperties("${moduleName}")
public class AppConfig extends AppCustomConfig {
    /**
     * Active profiles.
     */
    @Value("#[[${spring.profiles.active:}]]#")
    private String activeProfilesString;

    /**
     * When true, debug mode is enabled (used for local development).
     */
    private final boolean debug = "true".equals(System.getenv("appDebug"));

    private String mainHost;

    @Value("${spring.datasource.url}")
    private String datasourceUrl;

    /**
     * When true, user after registration will be received activation email.
     */
    private boolean activationEnabled = true;

    private String rememberMeKey;

    private String adminPassword = "admin";

    private String emailHost;

    private String emailPassword;

    private String emailFrom;

    /**
     * Product name. Used in email templates, titles, etc.
     */
    private String productName = "${productName}";

    /**
     * When true, reCaptcha will be enabled on login.
     */
    private boolean reCaptchaInLoginEnable = false;

    /**
     * When true, reCaptcha will be enabled on register.
     */
    private boolean reCaptchaInRegisterEnable = false;

    /**
     * When true, reCaptcha will be enabled on password recover.
     */
    private boolean reCaptchaInPasswordRecoverEnable = false;

    /**
     * Public site key for reCaptcha.
     */
    private String reCaptchaSiteKey;

    /**
     * Secret key for reCaptcha.
     */
    private String reCaptchaSecretKey;

    /**
     * List of emails that allowed to register. Empty means all emails are allowed.
     */
    private String allowedEMails;

    private float reCaptchaThreshold = 0.5f;

    private int httpClientTimeout = 5000;

    @NotNull
    public String firstActiveProfile() {
        return Stream.of(activeProfilesString.split(",")).findFirst().orElse("dev");
    }

    @NotNull
    public Set<String> finalAllowedEMails() {
        if (StringUtils.isBlank(allowedEMails)) {
            return Set.of();
        }

        return Arrays.stream(allowedEMails.split(","))
                .map(String::trim)
                .collect(Collectors.toSet());
    }

    @PostConstruct
    protected void validate() {
        show();

        Validate.notBlank(mainHost, "mainHost is required");
        Validate.notBlank(emailFrom, "emailFrom is required");
        Validate.notBlank(emailHost, "emailHost is required");
        Validate.notBlank(emailPassword, "emailPassword is required");
        Validate.notBlank(rememberMeKey, "rememberMeKey is required");
        Validate.notBlank(adminPassword, "adminPassword is required");
        super.validate();
    }

    @Override
    protected void show() {
        log.info("-------------------------------------");
        log.info("App version: {}", GitProperties.getAppVersion());
        log.info("Active profiles: {}", activeProfilesString);
        log.info("Main host: {}", getMainHost());
        log.info("Database url: {}", getDatasourceUrl());
        log.info("Email host: {}", getEmailHost());
        log.info("Activation enabled: {}", isActivationEnabled());
        super.show();
        showJvmFlags();
        log.info("-------------------------------------");
    }

    protected void showJvmFlags() {
        final RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();
        final List<String> inputArguments = runtimeMXBean.getInputArguments();
        log.info("JVM Flags:");
        for (String arg : inputArguments) {
            log.info(arg);
        }

        // Get specific memory-related information
        final long maxHeapSize = Runtime.getRuntime().maxMemory();
        final long initialHeapSize = Runtime.getRuntime().totalMemory();

        log.info("Memory Information:");
        log.info("Max Heap Size: {}", FileUtils.byteCountToDisplaySize(maxHeapSize));
        log.info("Initial Heap Size: {}", FileUtils.byteCountToDisplaySize(initialHeapSize));
    }

}
