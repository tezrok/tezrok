package ${package}.service;

import ${package}.dto.${name}Dto;
import ${package}.dto.full.${name}FullDto;
import ${package}.jooq.tables.records.${name}Record;
import ${package}.repository.${name}Repository;
import ${package}.mapper.${name}Mapper;
import ${package}.repository.EntityGraphLoader;
import ${package}.repository.EntityGraphStore;
import ${package}.repository.EntityUpdateType;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Collection;

/**
 * Service for {@link ${name}Dto}.
 */
@Transactional
@Service
public class ${name}Service {
    protected final ${name}Repository ${lname}Repository;

    protected final ${name}Mapper ${lname}Mapper;

    protected final EntityGraphLoader entityGraphLoader;

    protected final EntityGraphStore entityGraphStore;

    public ${name}Service(final ${name}Repository ${lname}Repository, final ${name}Mapper ${lname}Mapper, final EntityGraphLoader entityGraphLoader, final EntityGraphStore entityGraphStore) {
        this.${lname}Repository = ${lname}Repository;
        this.${lname}Mapper = ${lname}Mapper;
        this.entityGraphLoader = entityGraphLoader;
        this.entityGraphStore = entityGraphStore;
    }

    @Transactional(readOnly = true)
    public ${name}FullDto getFull${name}ById(${primaryType} id) {
        return entityGraphLoader.getFull${name}ById(id);
    }

    @Transactional()
    public ${primaryType} saveFull${name}(${name}FullDto item) {
        return entityGraphStore.saveFull${name}(item);
    }

    @Transactional()
    public ${name}FullDto saveFull${name}AndReturn(${name}FullDto item) {
        Long itemId = entityGraphStore.saveFull${name}(item);
        return entityGraphLoader.getFull${name}ById(itemId);
    }

    @Transactional()
    public ${primaryType} importFull${name}(${name}FullDto item) {
        return entityGraphStore.saveFull${name}(item, EntityUpdateType.UPDATE_RELATION_BY_NAME);
    }

    @Transactional()
    public List<${primaryType}> importFull${name}s(List<${name}FullDto> items) {
        return items.stream().map(item -> entityGraphStore.saveFull${name}(item, EntityUpdateType.UPDATE_RELATION_BY_NAME)).toList();
    }

    @Transactional()
    public ${name}FullDto importFull${name}AndReturn(${name}FullDto item) {
        final ${primaryType} id = entityGraphStore.saveFull${name}(item, EntityUpdateType.UPDATE_RELATION_BY_NAME);
        return entityGraphLoader.getFull${name}ById(id);
    }
}
