package ${package}.web.rest;


import ${package}.dto.${name}Dto;
import ${package}.dto.full.${name}FullDto;
import ${package}.dto.IdDto;
import ${package}.repository.MatchType;
import ${package}.service.${name}Service;
import jakarta.validation.Valid;
import org.apache.commons.lang3.StringUtils;
import org.jetbrains.annotations.NotNull;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.http.ResponseEntity;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

/**
* Api methods for {@link ${name}Dto} entity
*/
@RestController
@RequestMapping("/api/v1")
public class ${name}Controller {

    @NotNull
    private final ${name}Service ${lname}Service;

    public ${name}Controller(@NotNull ${name}Service ${lname}Service) {
        this.${lname}Service = ${lname}Service;
    }

    @RequestMapping("/${lname}s/table")
    public List<${name}Dto> findAll() {
        return ${lname}Service.findAll();
    }

    @GetMapping(value = "/${lname}s/search")
    public Page<${name}Dto> searchByTerm(@RequestParam(value = "term", required = false) String searchTerm,
                                         @RequestParam(value = "match", defaultValue = "exact") String matchTypes,
                                         @RequestParam(value = "union", defaultValue = "false") boolean unionPages,
                                         Pageable pageable) {
        // param "match" could be a list of MatchType separated by comma
        // returns first not empty page result or empty page
        // TODO: optimize this method
        final List<MatchType> matches = Arrays.stream(matchTypes.split(","))
                .filter(StringUtils::isNotBlank)
                .map(MatchType::fromParam)
                .distinct()
                .toList();
        if (matches.size() == 1) {
            return ${lname}Service.searchByTerm(searchTerm.trim(), pageable, matches.get(0), true);
        } else if (unionPages) {
            // collect page by calling searchByTerm with each match type
            final Set<${name}Dto> results = new LinkedHashSet<>(pageable.getPageSize());
            for (final MatchType matchType : matches) {
                final Page<${name}Dto> page = ${lname}Service.searchByTerm(searchTerm.trim(), pageable, matchType, false);
                results.addAll(page.getContent());
                if (results.size() >= pageable.getPageSize()) {
                    // break if we have enough results
                    break;
                }
            }
            return new PageImpl(new ArrayList<>(results), pageable, results.size());
        } else {
            // return first nonempty page
            return matches.stream()
                    .map(type -> ${lname}Service.searchByTerm(searchTerm.trim(), pageable, type, true))
                    .filter(p -> p.getTotalElements() > 0)
                    .findFirst()
                    .orElseGet(() -> Page.empty(pageable));
        }
    }

    @GetMapping("/${lname}/table/{id}")
    public ResponseEntity<${name}Dto> getById(@PathVariable("id") Long id) {
        return ResponseEntity.ok(${lname}Service.getById(id));
    }

    @GetMapping("/${lname}/{id}")
    public ResponseEntity<${name}FullDto> getFull${name}ById(@PathVariable("id") Long id) {
        return ResponseEntity.ok(${lname}Service.getFull${name}ById(id));
    }

    @PostMapping("/${lname}")
    public ResponseEntity<?> createFull${name}(@Valid @RequestBody ${name}FullDto dto, @RequestParam(value = "return", required = false, defaultValue = "false") boolean returnEntity) {
        if (returnEntity) {
            return ResponseEntity.ok(${lname}Service.saveFull${name}AndReturn(dto));
        }

        return ResponseEntity.ok(new IdDto(${lname}Service.saveFull${name}(dto)));
    }

    @PutMapping("/${lname}/{id}")
    public ResponseEntity<?> updateFull${name}(@PathVariable("id") Long id, @Valid @RequestBody ${name}FullDto dto, @RequestParam(value = "return", required = false, defaultValue = "false") boolean returnEntity) {
        dto.${primarySetter}(id);

        if (returnEntity) {
            return ResponseEntity.ok(${lname}Service.saveFull${name}AndReturn(dto));
        }

        return ResponseEntity.ok(new IdDto(${lname}Service.saveFull${name}(dto)));
    }

    @PostMapping("/${lname}/import")
    public ResponseEntity<?> importFull${name}(@RequestBody ${name}FullDto dto, @RequestParam(value = "return", required = false, defaultValue = "false") boolean returnEntity) {
        // TODO: validate dto before import
        if (returnEntity) {
            return ResponseEntity.ok(${lname}Service.importFull${name}AndReturn(dto));
        }

        return ResponseEntity.ok(new IdDto(${lname}Service.importFull${name}(dto)));
    }
}
