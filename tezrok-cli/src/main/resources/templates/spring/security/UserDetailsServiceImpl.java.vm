package ${package}.service;

import ${package}.dto.PermissionDto;
import ${package}.dto.RoleDto;
import ${package}.dto.UserDetailsImpl;
import ${package}.dto.UserDto;
import ${package}.repository.PermissionRepository;
import ${package}.repository.RoleRepository;
import ${package}.repository.UserRepository;
import org.jetbrains.annotations.NotNull;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * Implementation of {@link UserDetailsService}.
 */
@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;

    public UserDetailsServiceImpl(@NotNull final UserRepository userRepository,
                                  @NotNull final RoleRepository roleRepository,
                                  @NotNull final PermissionRepository permissionRepository) {
        this.permissionRepository = permissionRepository;
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
    }

    @Transactional(readOnly = true)
    @Override
    public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException {
        // add config to deny login by email
        final UserDto user = userRepository.getByNameOrEmail(username, username);
        if (user == null) {
            throw new UsernameNotFoundException("User not found: " + username);
        }
        final List<RoleDto> roles = roleRepository.findUserRolesByUserId(user.getId());
        final List<Long> roleIds = roles.stream().map(RoleDto::getId).toList();
        final List<PermissionDto> permissions = permissionRepository.findRolePermissionsByRoleIdIn(roleIds);
        final List<GrantedAuthority> authorities = new ArrayList<>(roles.size() + permissions.size());
        roles.forEach(role -> authorities.add(new SimpleGrantedAuthority("ROLE_" + role)));
        permissions.forEach(permission -> authorities.add(new SimpleGrantedAuthority(permission.getName())));

        return new UserDetailsImpl(user, authorities);
    }
}
