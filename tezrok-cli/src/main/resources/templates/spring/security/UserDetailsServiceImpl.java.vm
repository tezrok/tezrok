package ${package}.service;


import ${package}.dto.UserDetailsImpl;
import ${package}.dto.UserDto;
import ${package}.dto.full.PermissionFullDto;
import ${package}.dto.full.RoleFullDto;
import ${package}.dto.full.UserFullDto;
import ${package}.repository.EntityGraphLoader;
import ${package}.repository.UserRepository;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
/**
 * Implementation of {@link UserDetailsService}.
 */
@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;

    private final EntityGraphLoader entityGraphLoader;

    public UserDetailsServiceImpl(UserRepository userRepository,
                                  EntityGraphLoader entityGraphLoader) {
        this.userRepository = userRepository;
        this.entityGraphLoader = entityGraphLoader;
    }

    @Transactional(readOnly = true, noRollbackFor = {UsernameNotFoundException.class})
    @Override
    public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException {
        // add config to deny login by email
        final UserDto userDto = userRepository.getByNameIgnoreCaseOrEmailIgnoreCase(username, username);
        if (userDto == null) {
            throw new UsernameNotFoundException("User not found: " + username);
        }
        final UserFullDto user = entityGraphLoader.getFullUserById(userDto.getId());
        Collection<RoleFullDto> roles = CollectionUtils.emptyIfNull(user.getRoles());
        final List<PermissionFullDto> permissions = roles.stream().map(RoleFullDto::getPermissions)
                .filter(Objects::nonNull).flatMap(Collection::stream).toList();
        final List<GrantedAuthority> authorities = new ArrayList<>(roles.size() + permissions.size());
        roles.forEach(role -> authorities.add(new SimpleGrantedAuthority("ROLE_" + role.getName())));
        permissions.forEach(permission -> authorities.add(new SimpleGrantedAuthority(permission.getName())));
        return new UserDetailsImpl(userDto, authorities);
    }
}
