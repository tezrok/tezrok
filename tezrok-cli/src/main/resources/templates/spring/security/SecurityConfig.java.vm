package ${package}.config;

import ${package}.repository.PersistentTokenRepositoryImpl;
import ${package}.repository.RememberMeTokenRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.RememberMeServices;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true)
public class SecurityConfig {
    private final AppConfig appConfig;
    private final UserDetailsService userDetailsService;
    private final RememberMeTokenRepository rememberMeTokenRepository;
    private final ApiKeyAuthFilter apiKeyAuthFilter;

    public SecurityConfig(final AppConfig appConfig,
                          final UserDetailsService userDetailsService,
                          final RememberMeTokenRepository rememberMeTokenRepository,
                          final ApiKeyAuthFilter apiKeyAuthFilter) {
        this.appConfig = appConfig;
        this.userDetailsService = userDetailsService;
        this.rememberMeTokenRepository = rememberMeTokenRepository;
        this.apiKeyAuthFilter = apiKeyAuthFilter;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(final HttpSecurity httpSecurity) throws Exception {
        httpSecurity.csrf(p -> p.disable());
        // TODO: properly configure security from input model
        httpSecurity.authorizeHttpRequests(req -> req
                .requestMatchers("/api/v1/**").authenticated()
                .anyRequest().permitAll());

        httpSecurity.logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
                .deleteCookies("JSESSIONID")
                .invalidateHttpSession(true)
                .clearAuthentication(true)
                .permitAll());

        httpSecurity.rememberMe(rememberMe -> rememberMe
                .rememberMeServices(rememberMeService()));

        httpSecurity.addFilterBefore(apiKeyAuthFilter, UsernamePasswordAuthenticationFilter.class);

        return httpSecurity.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(final AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public RememberMeServices rememberMeService() {
        var service = new PersistentTokenBasedRememberMeServices(appConfig.getRememberMeKey(),
                userDetailsService, persistentTokenRepository());
        service.setAlwaysRemember(true);

        return service;
    }

    @Bean
    public PersistentTokenRepository persistentTokenRepository() {
        return new PersistentTokenRepositoryImpl(rememberMeTokenRepository);
    }
}
